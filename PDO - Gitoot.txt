    Full List of Blog Posts
index.php?
getposts.php?


<?php
require_once('connection.php');


    try {
        $stmt = $dbconn->query[b]('SELECT id, title,      
        description[c], createdAt FROM blogPost ORDER BY 
        id DESC');
        while($row = $stmt->fetch()){
            
            echo '<div>';
                echo '<h1><a href="viewpost.php?id='.$row['id'].'">'.$row['title'].'</a></h1>';
                echo '<p>Posted on '.date('jS M Y H:i:s', strtotime($row['createdAt'])).'</p>';
                echo '<p>'.$row['description'].'</p>';                
                echo '<p><a href="viewpost.php?id='.$row['id'].'">Read More</a></p>';                
            echo '</div>';


        }


    } catch(PDOException $e) {
        echo $e->getMessage();
    }
?>


View Post
viewpost.php


<?php


require_once('connection.php');


$stmt = $dbconn->prepare[d]('SELECT id, title, content, createdAt FROM post WHERE id = :id');
$stmt->execute(array(':id' => $_GET['id']));
$row = $stmt->fetch();
if($row['id'] == ''){
   header('Location: ./');
   exit;[e]
}
echo '<div>';
   echo '<h1>'.$row['title'].'</h1>';
   echo '<p>Posted on '.date('jS M Y', strtotime($row['createdAt'])).'</p>';
   echo '<p>'.$row['content'].'</p>';                
echo '</div>';


?>


View Posts with author, location, category

<?php
require_once('connection.php');


    $stmt = $dbconn->prepare('SELECT blogPost.title, blogPost.createdAt, blogPost.content, users.username, location.locationname, category.categoryname FROM users
    LEFT JOIN blogPost ON blogPost.user_id = users.id
    LEFT JOIN blogLocation ON blogLocation.post_id = post.id
    LEFT JOIN location ON blogLocation.location_id = location.id
    LEFT JOIN blogCategory ON blogCategory.post_id = post.id
    LEFT JOIN category ON blogCategory.category_id = category.id');
   $stmt->execute(array(':id' => $_GET['id']));
   $row = $stmt->fetch();
   if($row['id'] == ''){
   header('Location: ./');
   exit;[e]
}
echo '<div>';
   echo '<h1>'.$row['title'].'</h1>';
   echo '<p>Posted on '.date('jS M Y', strtotime($row['createdAt'])).'</p>';
   echo '<p>'.$row['content'].'</p>';     
   echo '<p>'.$row['name'].'</p>'; 
   echo '<p>'.$row['name'].'</p>'; 
   echo '<p>'.$row['name'].'</p>';            
echo '</div>';

?>

View post by blogLocation

<?php

require_once('connection.php');

   $title  = trim($_GET["title"]);
   $locationname  = trim($_GET["locationname"]);
   $id = trim($_GET[“post.id”]);

$stmt = $dbconn->prepare('SELECT title, locationname FROM location
    LEFT JOIN blogLocation ON blogLocation.location_id = location.id
    LEFT JOIN blogPost ON blogLocation.post_id = post.id'
    where location.locationname = :location.locationname);
    $stmt->bindParam(':title, $title);
    $stmt->bindParam(':location.locationname, $locationname);
    $stmt->bindParam(':post.id, $id);
    $stmt->execute();
    $data = $stmt->fetch(PDO::FETCH_ASSOC);
    echo json_encode($data);
    $dbconn = null; 

?>

View post by blogCategory

<?php

require_once('connection.php');

   $title  = trim($_GET["title"]);
   $categoryname  = trim($_GET["categoryname"]);
   $id = trim($_GET[“post.id”]);

    SELECT title, name FROM category
    LEFT JOIN blogCategory ON blogCategory.category_id = category.id
    LEFT JOIN blogPost ON blogCategory.post_id = post.id
    where category.categoryname = category.categoryname
    $stmt->bindParam(':title, $title);
    $stmt->bindParam(':category.categoryname, $categoryname);
    $stmt->bindParam(':post.id, $id);
    $stmt->execute();
    $data = $stmt->fetch(PDO::FETCH_ASSOC);
    echo json_encode($data);
    $dbconn = null; 

?>

Submit Post
addpost.php
<?php


  require_once('connection.php');


  $title = trim($_POST["title"]);
  $description = trim($_POST["description"]);
  $content = trim($_POST["content"]);
  $createdAt = trim($_POST["createdAt"]);
  
 


    $stmt = $dbconn->prepare('INSERT INTO blogPost(title, description, content, createdAt)
    VALUES (:title, :description, :content, :createdAt)');
    $stmt->bindParam(':title, $title);
    $stmt->bindParam(':description, $description);
    $stmt->bindParam(':content, $content);
    $stmt->bindParam(':createdAt, $createdAt);
    
 
    if($stmt->execute()){
      $result =1;
    }


    echo $result;
    $dbconn = null;
?>

Edit Post
editpost.php


<?php


  require_once('connection.php');


 $title = trim($_POST["title"]);
  $description = trim($_POST["description"]);
  $content = trim($_POST["content"]);
  $id = trim($_POST[“id”]);


    $stmt = $dbconn->prepare('UPDATE blogPost set title = :title, description = :description, content = :content where id = :id')
    $stmt->bindParam(':title, $title);
    $stmt->bindParam(':description, $description);
    $stmt->bindParam(':content, $content);
    $stmt->bindParam(':id, $id);
 
    if($stmt->execute()){
      $result =1;
    }


    echo $result;
    $dbconn = null;




Delete Post
deletepost.php




<?php
 require_once('connection.php');


$result = 0;
echo $id = intval($_POST['pid']);


if(intval($id)){
  $stmt = $dbconn->prepare("DELETE FROM blogPost WHERE id = :id");
  $stmt->bindParam(':id', $id, PDO::PARAM_INT);
  if($stmt->execute()){
    $result = 1;
  }
}
 echo $result;
 $dbconn = null;

 




[a]want to figure out a way that the password is not in plain text here - don't understand how the hashing works
[b]not sure whether to use a query or prepare statement here
[c]use description as the initial piece of chat about the blog
[d]using a prepare statement as we're using $__GET
[e]error handling, if no id then redirect user to main page